{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport isIteratorLike from '@stdlib/assert-is-iterator-like' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which removes consecutive duplicated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} [limit=1] - number of allowed consecutive duplicates\n* @throws {TypeError} must provide an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator' ;\n*\n* var iter = iterDedupe( array2iterator( [ 1, 1, 2, 3, 3 ] ) );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterDedupe( iterator, limit ) {\n\tvar count;\n\tvar iter;\n\tvar prev;\n\tvar FLG;\n\tvar N;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0CI4H', iterator ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isPositiveInteger( limit ) ) {\n\t\t\tthrow new TypeError( format( '0CI4I', limit ) );\n\t\t}\n\t\tN = limit;\n\t} else {\n\t\tN = 1;\n\t}\n\tprev = NaN; // Note: we leverage the fact that `NaN` is not equal to anything, including itself, to handle initial condition\n\tcount = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( v.value === prev ) {\n\t\t\tcount += 1;\n\t\t\tif ( count > N ) {\n\t\t\t\t// Find the next \"unique\" value...\n\t\t\t\twhile ( v.value === prev ) {\n\t\t\t\t\tv = iterator.next();\n\t\t\t\t\tif ( v.done ) {\n\t\t\t\t\t\tFLG = true;\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprev = v.value;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tprev = v.value;\n\t\t\tcount = 1;\n\t\t}\n\t\treturn {\n\t\t\t'value': prev,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDedupe( iterator[ iteratorSymbol ](), N );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterDedupe;\n"],"names":["iterDedupe","iterator","limit","count","iter","prev","FLG","N","isIteratorLike","TypeError","format","arguments","length","isPositiveInteger","NaN","setReadOnly","next","end","iteratorSymbol","isFunction","factory","v","done","value"],"mappings":";;mkBA0DA,SAASA,EAAYC,EAAUC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBP,GACrB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,GAAKU,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAmBX,GACxB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvCK,EAAIL,OAEJK,EAAI,EAcL,OAZAF,EAAOS,IACPX,EAAQ,EAIRY,EADAX,EAAO,GACY,OAAQY,GAC3BD,EAAaX,EAAM,SAAUa,GAGxBC,GAAkBC,EAAYlB,EAAUiB,KAC5CH,EAAaX,EAAMc,EAAgBE,GAE7BhB,EAQP,SAASY,IACR,IAAIK,EACJ,GAAKf,EACJ,MAAO,CACNgB,MAAQ,GAIV,IADAD,EAAIpB,EAASe,QACNM,KAEN,OADAhB,GAAM,EACCe,EAER,GAAKA,EAAEE,QAAUlB,GAEhB,IADAF,GAAS,GACII,EAAI,CAEhB,KAAQc,EAAEE,QAAUlB,GAEnB,IADAgB,EAAIpB,EAASe,QACNM,KAEN,OADAhB,GAAM,EACCe,EAGThB,EAAOgB,EAAEE,MACTpB,EAAQ,QAGTE,EAAOgB,EAAEE,MACTpB,EAAQ,EAET,MAAO,CACNoB,MAASlB,EACTiB,MAAQ,GAWV,SAASL,EAAKM,GAEb,OADAjB,GAAM,EACDK,UAAUC,OACP,CACNW,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASF,IACR,OAAOpB,EAAYC,EAAUiB,KAAoBX"}